{"ast":null,"code":"var _jsxFileName = \"/Users/ioanastroinea/Documents/React Portfolio/rick-morty/src/components/Filters/Category/Gender.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Gender = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"accordion-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"accordion-header\",\n      id: \"headingOne\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"accordion-button\",\n        type: \"button\",\n        \"data-bs-toggle\": \"collapse\",\n        \"data-bs-target\": \"#collapseOne\",\n        \"aria-expanded\": \"true\",\n        \"aria-controls\": \"collapseOne\",\n        children: \"Accordion Item #1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"collapseOne\",\n      className: \"accordion-collapse collapse show\",\n      \"aria-labelledby\": \"headingOne\",\n      \"data-bs-parent\": \"#accordionExample\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"accordion-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"This is the first item's accordion body.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this), \" It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \".accordion-body\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 29\n        }, this), \", though the transition does limit overflow.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n_c = Gender;\nexport default Gender;\nvar _c;\n$RefreshReg$(_c, \"Gender\");","map":{"version":3,"names":["React","Gender"],"sources":["/Users/ioanastroinea/Documents/React Portfolio/rick-morty/src/components/Filters/Category/Gender.js"],"sourcesContent":["import React from \"react\";\n\nconst Gender = () => {\n  return (\n    <div className=\"accordion-item\">\n      <h2 className=\"accordion-header\" id=\"headingOne\">\n        <button\n          className=\"accordion-button\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#collapseOne\"\n          aria-expanded=\"true\"\n          aria-controls=\"collapseOne\"\n        >\n          Accordion Item #1\n        </button>\n      </h2>\n      <div\n        id=\"collapseOne\"\n        className=\"accordion-collapse collapse show\"\n        aria-labelledby=\"headingOne\"\n        data-bs-parent=\"#accordionExample\"\n      >\n        <div className=\"accordion-body\">\n          <strong>This is the first item's accordion body.</strong> It is shown\n          by default, until the collapse plugin adds the appropriate classNamees\n          that we use to style each element. These classNamees control the\n          overall appearance, as well as the showing and hiding via CSS\n          transitions. You can modify any of this with custom CSS or overriding\n          our default variables. It's also worth noting that just about any HTML\n          can go within the <code>.accordion-body</code>, though the transition\n          does limit overflow.\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Gender;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC;AAE1B,MAAMC,MAAM,GAAG,MAAM;EACnB,oBACE;IAAK,SAAS,EAAC,gBAAgB;IAAA,wBAC7B;MAAI,SAAS,EAAC,kBAAkB;MAAC,EAAE,EAAC,YAAY;MAAA,uBAC9C;QACE,SAAS,EAAC,kBAAkB;QAC5B,IAAI,EAAC,QAAQ;QACb,kBAAe,UAAU;QACzB,kBAAe,cAAc;QAC7B,iBAAc,MAAM;QACpB,iBAAc,aAAa;QAAA,UAC5B;MAED;QAAA;QAAA;QAAA;MAAA;IAAS;MAAA;MAAA;MAAA;IAAA,QACN,eACL;MACE,EAAE,EAAC,aAAa;MAChB,SAAS,EAAC,kCAAkC;MAC5C,mBAAgB,YAAY;MAC5B,kBAAe,mBAAmB;MAAA,uBAElC;QAAK,SAAS,EAAC,gBAAgB;QAAA,wBAC7B;UAAA,UAAQ;QAAwC;UAAA;UAAA;UAAA;QAAA,QAAS,sXAMvC;UAAA,UAAM;QAAe;UAAA;UAAA;UAAA;QAAA,QAAO,gDAEhD;MAAA;QAAA;QAAA;QAAA;MAAA;IAAM;MAAA;MAAA;MAAA;IAAA,QACF;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV,CAAC;AAAC,KAlCIA,MAAM;AAoCZ,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}